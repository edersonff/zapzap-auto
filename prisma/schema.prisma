generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  active
  inactive
  pending
  error
}

model User {
  id Int @id @default(autoincrement())

  name     String  @db.VarChar(100)
  email    String  @unique @db.VarChar(100)
  phone    String? @unique @db.VarChar(20)
  image    String? @db.VarChar(130)
  password String?

  subscription  Subscription?
  whatsapps     Whatsapp[]
  chatbots      Chatbot[]
  options       Options[]
  bulks         Bulk[]
  conversations Conversation[]
  usages        Usage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Plan {
  id Int @id @default(autoincrement())

  name        String @db.VarChar(100)
  description String @db.Text
  price       Float
  status      Status

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Subscription {
  id Int @id @default(autoincrement())

  status Status

  expiredAt DateTime

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  planId Int
  plan   Plan @relation(fields: [planId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Chatbot {
  id Int @id @default(autoincrement())

  name String? @db.VarChar(100)

  about      String  @db.Text
  objectives String  @db.Text
  examples   String? @db.Text
  finalize   String? @db.Text

  status Status

  whatsapps     Whatsapp[]
  conversations Conversation[]

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chatbots")
}

model Whatsapp {
  id Int @id @default(autoincrement())

  number String  @unique @db.VarChar(20)
  qr     String? @db.Text
  status Status

  conversations Conversation[]
  bulks         Bulk[]

  userId Int
  user   User @relation(fields: [userId], references: [id])

  chatbotId Int?
  chatbot   Chatbot? @relation(fields: [chatbotId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("whatsapps")
}

model Conversation {
  id Int @id @default(autoincrement())

  to String @db.VarChar(32)

  messages Message[]

  finilizedAt DateTime?

  whatsappId Int
  whatsapp   Whatsapp @relation(fields: [whatsappId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  chatbotId Int?
  chatbot   Chatbot? @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  bulkId Int?
  bulk   Bulk? @relation(fields: [bulkId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

model Message {
  id Int @id @default(autoincrement())

  message String @db.Text
  answer  String @db.Text

  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("messages")
}

model Options {
  id Int @id @default(autoincrement())

  onlyFirstMessage     Boolean @default(true)
  onlyUnreadMessages   Boolean @default(true)
  sendMailOnErrors     Boolean @default(false)
  sendWhatsappOnErrors Boolean @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("options")
}

enum BulkType {
  now
  minute
  hourly
  daily
  weekly
  monthly
  yearly
  specific
}

model Bulk {
  id Int @id @default(autoincrement())

  numbers String @db.Text
  message String @db.Text

  type BulkType
  time DateTime

  status Status

  conversations Conversation[]

  whatsappId Int
  whatsapp   Whatsapp @relation(fields: [whatsappId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  lastRun DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bulks")
}

model Usage {
  id Int @id @default(autoincrement())

  month Int
  year  Int

  totalMessages Int

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usages")
}
